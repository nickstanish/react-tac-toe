{"version":3,"sources":["Tile.js","Board.js","App.js","serviceWorker.js","index.js"],"names":["Tile","props","classes","active","push","owner","win","className","join","react_default","a","createElement","onClick","clickhandler","WIN_COMBOS","SQUARES","GameBoard","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","tiles","turn","Math","random","winner","replay","cellIndex","nextState","objectSpread","defineProperty","setState","checkWinAndGetNextState","winningCells","i","length","_WIN_COMBOS$i","slicedToArray","b","c","newTiles","forEach","index","keys","_this2","cells","map","data","key","cellClick","clearfix","replayOverlay","React","Component","App","Board_GameBoard","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.45f82f46.chunk.js","sourcesContent":["import React from 'react';\n\nexport default function Tile(props) {\n  const classes = ['tile'];\n  if (props.active) {\n    classes.push('active');\n    classes.push(props.owner);\n  } else {\n    classes.push('inactive');\n  }\n  if (props.win) {\n    classes.push('winner');\n  }\n  const className = classes.join(' ');\n  return (\n    <div className={className} onClick={props.clickhandler}>\n      <div className=\"content\"></div>\n    </div>\n  );\n}\n","import React from 'react';\nimport Tile from './Tile';\nimport './Board.css';\n\n\n// 0 1 2\n// 3 4 5\n// 6 7 8\nconst WIN_COMBOS = [\n  [0,1,2],\n  [3,4,5],\n  [6,7,8],\n  [0,3,6],\n  [1,4,7],\n  [2,5,8],\n  [0,4,8],\n  [6,4,2]\n];\n\nconst SQUARES = [0, 1, 2, 3, 4, 5, 6, 7, 8];\n\nexport default class GameBoard extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      tiles: {},\n      turn: Math.random() > 0.5 ? 'x' : 'y',\n      winner: null,\n      replay: false\n    };\n  }\n\n  cellClick(cellIndex) {\n    if (this.state.winner || this.state.tiles[cellIndex]) {\n      return;\n    }\n    const nextState = {\n      ...this.state,\n      tiles: {\n        ...this.state.tiles,\n        [cellIndex]: {\n          active: true,\n          owner: this.state.turn\n        }\n      }\n    };\n\n    this.setState(this.checkWinAndGetNextState(nextState));\n  }\n\n  checkWinAndGetNextState(nextState) {\n    const winningCells = [];\n    const tiles = nextState.tiles;\n    for (let i = 0; i < WIN_COMBOS.length; i++){\n      const [a, b, c] = WIN_COMBOS[i];\n      if (tiles[a] && tiles[b] && tiles[c] && tiles[a].owner === tiles[b].owner && tiles[b].owner === tiles[c].owner){\n        winningCells.push(a);\n        winningCells.push(b);\n        winningCells.push(c);\n      }\n    }\n\n    if (winningCells.length > 0) {\n      const newTiles = {};\n      winningCells.forEach(index => {\n        newTiles[index] = {\n          ...tiles[index],\n          win: true\n        };\n      });\n\n      return {\n        ...nextState,\n        tiles: {\n          ...tiles,\n          ...newTiles\n        },\n        winner: this.state.turn,\n        replay: true\n      };\n    }\n    return {\n      ...nextState,\n      turn: this.state.turn === 'x' ? 'y' : 'x',\n      replay: Object.keys(nextState.tiles).length === SQUARES.length\n    };\n  }\n\n\n\n  replay () {\n    this.setState({\n      tiles: {},\n      winner: null,\n      replay: false\n    });\n  }\n\n  render() {\n    const cells = SQUARES.map(index => {\n      const data = this.state.tiles[index] || {};\n      return (\n        <Tile\n          key={index}\n          active={data.active}\n          win={data.win}\n          owner={data.owner}\n          clickhandler={() => this.cellClick(index)} />\n      );\n    });\n\n    if (this.state.replay) {\n      var clearfix = <div className=\"clearfix\" key=\"clearfix\" />;\n      var replayOverlay = (<div className=\"replay\" key=\"replay\" onClick={() => this.replay()} >\n          <h3>Click to play again</h3>\n        </div>\n        );\n      cells.push(clearfix);\n      cells.push(replayOverlay);\n    }\n    return (\n      <div>\n        <div>\n          <h3> Turn:\n            <div className={'showTurn ' + this.state.turn}>\n            </div>\n          </h3>\n        </div>\n        <div className={\"gameboard turn-\" + this.state.turn}>\n          {cells}\n        </div>\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport Board from './Board';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1 className=\"App-title\">React-Tac-Toe</h1>\n        </header>\n        <main>\n          <Board />\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}